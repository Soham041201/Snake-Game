{"version":3,"sources":["Snake.js","Food.js","App.js","reportWebVitals.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","App","state","onKeyDown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","onkeydown","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","Snake","Food","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.424888d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot, i) => {\r\n                const style = {\r\n                    left: `${dot[0]}%`,\r\n                    top: `${dot[1]}%`\r\n                }\r\n                return (\r\n                    <div className = \"snake-dot\" key={i} style={style}></div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n    const style = {\r\n        left: `${props.dot[0]}%`,\r\n        top: `${props.dot[1]}%`\r\n    }\r\n\r\n    return (\r\n        <div className=\"snake-food\" style={style}></div>\r\n    )\r\n}","import React, { Component } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y= Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return [x, y]\n}\n\nconst initialState = {\n  food: getRandomCoordinates(),\n    speed: 200,\n    direction: 'RIGHT',\n    snakeDots: [\n      [0,0],\n      [2,0]\n    ]\n\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  componentDidMount() {\n    setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 38:\n        this.setState({direction: 'UP'});\n        break;\n      case 40:\n        this.setState({direction: 'DOWN'});\n        break;\n      case 37:\n        this.setState({direction: 'LEFT'});\n        break;\n      case 39:\n        this.setState({direction: 'RIGHT'});\n        break;\n    }\n  }\n\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case 'RIGHT':\n        head = [head[0] + 2, head[1]];\n        break;\n      case 'LEFT':\n        head = [head[0] - 2, head[1]];\n        break;\n      case 'DOWN':\n        head = [head[0], head[1] + 2];\n        break;\n      case 'UP':\n        head = [head[0], head[1] - 2];\n        break; \n\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots\n    })\n  }\n\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.onGameOver();\n    }\n  }\n\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] == dot[0] && head[1] == dot[1]) {\n        this.onGameOver();\n      } \n    })  \n  }\n\n  checkIfEat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n      this.enlargeSnake();\n      this.increaseSpeed();\n    }\n  }\n\n  enlargeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([])\n    this.setState({\n      snakeDots: newSnake\n    })\n  }\n\n  increaseSpeed() {\n    if (this.state.speed > 10) {\n      this.setState({\n        speed: this.state.speed - 10\n      })\n    }\n  }\n\n  onGameOver() {\n    alert(`Game Over. Snake length is ${this.state.snakeDots.length}`);\n    this.setState(initialState)\n  }\n\n\n  render() {\n    return (\n      <div className = \"game-area\">\n        <Snake snakeDots={this.state.snakeDots} />\n        <Food dot={this.state.food} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}